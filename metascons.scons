#!/usr/bin/env scons # -*- python -*- #
'''
This is the metascons SConstuct file to drive builds of suitably
wrapped packages.

See metascons.default for how to write a wrapper module.

The build is driven by a required configuration file.  See
cfg/example.cfg for an example.  In addition, some options can be
specified as command-line parameters or as environment variables.  The
order of precidence is:

* command line
* configuration file
* environment variables.

'''

import os
import ConfigParser
from metascons.util import *

AddOption('--build-config',default=None,
          help='Name of the configuration file.  Required')

AddOption('--build-area',default=None,
          help='Location for unpacking and building tarballs')

AddOption('--web-cache-url',default=None,
          help='URL at which tarballs can be found')

AddOption('--tar-files',default=None,
          help='Local filesystem directory holding tarballs')

AddOption('--install-area',default=None,
          help='Base directory holding installed packages')

AddOption('--platform',default=guess_platform(),
          help='Unique binary platform name')

AddOption('--packages',default=[],action="append")

AddOption('--dbg',default=None,action='store_true',
          help='Use build with debug strings')

class MetaSCons(object):
    def __init__(self):
        self.cfg_file = GetOption('build_config')
        assert self.cfg_file,\
            'Must specify a build configuration file with --build-config'
        self.cfg = ConfigParser.SafeConfigParser()
        self.cfg.read(self.cfg_file)

        platform = self.get_option('platform')
        if self.get_option('dbg'): platform += '-dbg'
        print platform

        self.env = DefaultEnvironment(
            BUILD_AREA = self.get_option('build_area'),
            WEB_CACHE_URL = self.get_option('web_cache_url'),
            TAR_FILES = self.get_option('tar_files'),
            INSTALL_AREA = self.get_option('install_area'),
            PLATFORM = platform)
        fix_env(self.env)

        self.package_names = resolve_packages(self.get_option('packages'))
        assert self.package_names, \
            'No packages specified, use "packages" option'

        return

    def resolve_package_objects(self):
        self.package_objects = {}
        for pname in self.package_names:
            if not pname: continue

            exec ("from metascons.wrapper import %s" % pname)
            pmod = eval(pname)
            pobj = pmod.wrapper

            self.package_objects[pname] = pobj
            self.package_env(pobj)

            deps = pobj.dependencies()
            for dep in deps:
                if dep not in self.package_names:
                    self.package_names.append(dep)
                    pass
                continue
            continue
        return

    def resolve_dependencies(self):

        for pname in self.package_names:

            print 'Setting up %s' % pname

            pobj = self.package_objects[pname]

            stages = [
                'download',
                'unpack',
                'prepare',
                'build',
                'install',
                'environment',
                ]

            # lil helper
            def get_stage_item(pobj,stage,what):
                meth = eval("pobj.%s_%s" % (stage,what))
                return meth()

            lasttarget = self.cfg_file # bad idea?
            laststage = None
            for stage in stages:
                target = get_stage_item(pobj,stage,'target')
                action = get_stage_item(pobj,stage,'action')
                
                # print
                # print stage.upper()        
                # print '%s --> %s' % (lasttarget,target)
                # print action
                
                pobj.env.Command(target,lasttarget,action)
                laststage = stage
                lasttarget = get_stage_item(pobj,laststage,'target')
                continue

            # Set up the inter-package dependencies
            pobj.depobjs = []
            for dep in pobj.dependencies():
                other_obj = package_objects[dep]
                Requires(pobj.environment_target(), other_obj.environment_target())
                merge_env(pobj.env,other_obj.env)
                pobj.depobjs.append(other_obj)
                continue
            continue
        
        # Get the run-time environments
        for pname in self.package_names:
            pobj = self.package_objects[pname]
            recursive_merge_env(pobj)
            continue

        return

    def get_option(self,optname, section = 'DEFAULTS'):
        try:
            opt = GetOption(optname)
        except AttributeError,msg:
            pass
        else:
            if opt: return opt

        try:
            opt = self.cfg.get(section,optname,0,{'pwd':os.getcwd()})
        except ConfigParser.NoOptionError,msg:
            pass
        else:
            if opt: return opt
            
        return os.environ.get(optname.upper())

    def package_env(self,pobj):
        '''
        Set up a package module's environment.
        '''
        pkg_env = self.env.Clone()
        pobj.set_env(pkg_env)

        name = pobj.name()
        print 'Package env for %s (%s)' % (name,pobj)

        NAME = name.upper()

        version = self.get_option(name,'versions')
        pkg_env[NAME + '_VERSION'] = version
        print '%s %s' % (NAME,version)

        meths = [
            'dependencies',
            'version',
            'tarballname',
            'tarballurl',
            'tarballpath',
            'sourcedir',
            'installdir',
            ]

        for methname in meths:
            meth = eval("pobj.%s" % methname)
            val = meth()
            print methname,val
            if val is None: continue
            VAR = NAME + '_' + methname.upper()
            pkg_env[VAR] = val
            print '%s --> %s' % (VAR,val)
            continue
        return
    pass




msc = MetaSCons()
msc.resolve_package_objects()
msc.resolve_dependencies()
print '\nstarting build\n'
