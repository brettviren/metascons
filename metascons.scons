#!/usr/bin/env scons # -*- python -*- #
'''
This is the metascons SConstuct file to drive builds of suitably
wrapped packages.

See metascons.default for how to write a wrapper module.

The build is driven by a required configuration file.  See
cfg/example.cfg for an example.  In addition, some options can be
specified as command-line parameters or as environment variables.  The
order of precidence is:

* command line
* configuration file
* environment variables.

'''



# Explicit dependency:
# Depends(File('this_is_remade'),File('when_this_changes'))

# Order only:
# Requires(File('this_is_made'),File('only_after_this_exists'))

import os
import ConfigParser
from metascons.util import guess_platform

AddOption('--build-config',default=None,
          help='Name of the configuration file.  Required')

AddOption('--build-area',default=None,
          help='Location for unpacking and building tarballs')

AddOption('--web-cache-url',default=None,
          help='URL at which tarballs can be found')

AddOption('--tar-files',default=None,
          help='Local filesystem directory holding tarballs')

AddOption('--install-area',default=None,
          help='Base directory holding installed packages')

AddOption('--platform',default=guess_platform(),
          help='Unique binary platform name')

AddOption('--packages',default=[],action="append")

AddOption('--dbg',default=None,action='store_true',
          help='Use build with debug strings')

cfg_file = GetOption('build_config')
assert cfg_file, 'Must specify a build configuration file with --build-config'
cfg = ConfigParser.SafeConfigParser()
cfg.read(cfg_file)

def get_option(optname, section = 'DEFAULTS'):
    try:
        opt = GetOption(optname)
    except AttributeError,msg:
        pass
    else:
        if opt: return opt

    try:
        opt = cfg.get(section,optname,0,{'pwd':os.getcwd()})
    except ConfigParser.NoOptionError,msg:
        pass
    else:
        if opt: return opt
    
    return os.environ.get(optname.upper())


platform = get_option('platform')
if get_option('dbg'): platform += '-dbg'
print platform

env = DefaultEnvironment(BUILD_AREA = get_option('build_area'),
                         WEB_CACHE_URL = get_option('web_cache_url'),
                         TAR_FILES = get_option('tar_files'),
                         INSTALL_AREA = get_option('install_area'),
                         PLATFORM = platform)

def resolve_packages():
    pkgs = get_option('packages')
    if type(pkgs) == list:
        pkgs = ' '.join(pkgs)
    return pkgs.split(' ')

package_names = resolve_packages()
assert package_names, 'No packages specified, use "packages" option'

def package_env(pobj):
    '''
    Set up a package module's environment.
    '''
    pobj.set_env(env)

    name = pobj.name()
    print 'Package env for %s (%s)' % (name,pobj)

    NAME = name.upper()

    version = get_option(name,'versions')
    env[NAME + '_VERSION'] = version
    print '%s %s' % (NAME,version)

    meths = [
        'dependencies',
        'version',
        'tarballname',
        'tarballurl',
        'tarballpath',
        'sourcedir',
        'installdir',
        ]

    for methname in meths:
        meth = eval("pobj.%s" % methname)
        val = meth()
        print methname,val
        if val is None: continue
        VAR = NAME + '_' + methname.upper()
        env[VAR] = val
        print '%s --> %s' % (VAR,val)
        continue
    return


package_objects = {}
for pname in package_names:
    if not pname: continue

    exec ("from metascons.wrapper import %s" % pname)
    pmod = eval(pname)
    pobj = pmod.wrapper

    package_objects[pname] = pobj
    package_env(pobj)

    deps = pobj.dependencies()
    for dep in deps:
        if dep not in package_names:
            package_names.append(dep)
            pass
        continue
    continue

def get_stage_item(pobj,stage,what):
    meth = eval("pobj.%s_%s" % (stage,what))
    return meth()

for pname in package_names:
    print 'Setting up %s' % pname

    pobj = package_objects[pname]

    stages = [
        'download',
        'unpack',
        'prepare',
        'build',
        'install',
        ]

    lasttarget = cfg_file
    laststage = None
    for stage in stages:
        target = get_stage_item(pobj,stage,'target')
        action = get_stage_item(pobj,stage,'action')

        # print
        # print stage.upper()        
        # print '%s --> %s' % (lasttarget,target)
        # print action

        env.Command(target,lasttarget,action)
        laststage = stage
        lasttarget = get_stage_item(pobj,laststage,'target')
        continue

    # Set up the inter-package dependencies
    for dep in pobj.dependencies():
        other_mod = package_objects[dep]
        Requires(pobj.install_target(), other_mod.instal_target())
        continue

    continue

